<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxac.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxac.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Oct 31 19:04:55 2024
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">PendSV_Handler</a><BR>
 <LI><a href="#[8]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">CCM_AAR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[f]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[14]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">TIMER1_IRQHandler</a> from nrf_drv_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[25]">_sputc</a> from printf1.o(i._sputc) referenced from printf1.o(i.__0sprintf$1)
 <LI><a href="#[26]">adc_event_handler</a> from myadc.o(i.adc_event_handler) referenced from myadc.o(i.adc_config)
 <LI><a href="#[2f]">alert_timer_handler</a> from bsp.o(i.alert_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[2c]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.ble_stack_init)
 <LI><a href="#[36]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[30]">bsp_event_handler</a> from main.o(i.bsp_event_handler) referenced from main.o(i.buttons_leds_init)
 <LI><a href="#[2d]">button_timer_handler</a> from bsp.o(i.button_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[32]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.conn_params_init)
 <LI><a href="#[29]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[2]">digital_servo_motor_fun</a> from app_user.o(i.digital_servo_motor_fun) referenced 2 times from app_user.o(.data)
 <LI><a href="#[1]">gear_box_dc_motor_fun</a> from app_user.o(i.gear_box_dc_motor_fun) referenced 2 times from app_user.o(.data)
 <LI><a href="#[28]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[2e]">leds_timer_handler</a> from bsp.o(i.leds_timer_handler) referenced from bsp.o(i.bsp_init)
 <LI><a href="#[0]">linear_actuator_fun</a> from app_user.o(i.linear_actuator_fun) referenced 2 times from app_user.o(.data)
 <LI><a href="#[22]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[33]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.services_init)
 <LI><a href="#[27]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[31]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.conn_params_init)
 <LI><a href="#[34]">pwm_ready_callback</a> from mypwm.o(i.pwm_ready_callback) referenced from mypwm.o(i.smipwm_init)
 <LI><a href="#[2a]">pwm_ready_tick</a> from app_pwm.o(i.pwm_ready_tick) referenced from app_pwm.o(i.app_pwm_init)
 <LI><a href="#[35]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[2b]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[37]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[171]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[172]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[173]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[39]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[174]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[175]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smipwm_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>

<P><STRONG><a name="[17b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_values
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_adc_category
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_adc_category
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[17d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[45]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[4a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[43]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[38]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[17f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[180]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[f]"></a>ADC_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_disable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI2_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__0sprintf$1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[183]"></a>__1sprintf$1</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1), UNUSED)

<P><STRONG><a name="[15e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf1.o(i.__0sprintf$1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_periph_name
</UL>

<P><STRONG><a name="[47]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c5]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[184]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[185]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[186]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[65]"></a>adc_config</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, myadc.o(i.adc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = adc_config &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_enable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_channel_disable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determine_adc_category
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>adc_read_values</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, myadc.o(i.adc_read_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_read_values &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_adc_sampling
</UL>

<P><STRONG><a name="[68]"></a>adc_start_conversion</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, myadc.o(i.adc_start_conversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = adc_start_conversion &rArr; nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[70]"></a>adv_data_encode</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[83]"></a>app_button_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[85]"></a>app_button_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[8a]"></a>app_error_fault_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[5c]"></a>app_error_handler_bare</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m2_degree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m1_degree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_backward
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smipwm_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_adc_sampling
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>app_handler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, app_user.o(i.app_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_handler &rArr; simple_checksum
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[8d]"></a>app_pwm_busy_check</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_busy_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_busy_check &rArr; nrf_drv_timer_capture_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[8f]"></a>app_pwm_channel_duty_set</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, app_pwm.o(i.app_pwm_channel_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_cycle_ticks_get
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m2_degree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m1_degree
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_backward
</UL>

<P><STRONG><a name="[91]"></a>app_pwm_channel_duty_ticks_set</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_channel_duty_ticks_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_busy_check
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
</UL>

<P><STRONG><a name="[90]"></a>app_pwm_cycle_ticks_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_pwm.o(i.app_pwm_cycle_ticks_get))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
</UL>

<P><STRONG><a name="[9d]"></a>app_pwm_enable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_pwm_enable &rArr; nrf_drv_gpiote_out_task_force
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_enable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pan73_workaround
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smipwm_init
</UL>

<P><STRONG><a name="[a3]"></a>app_pwm_init</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, app_pwm.o(i.app_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_frequency_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smipwm_init
</UL>

<P><STRONG><a name="[89]"></a>app_timer_create</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[ab]"></a>app_timer_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_init &rArr; rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>app_timer_start</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[b4]"></a>app_timer_stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[b6]"></a>app_util_critical_region_enter</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[b8]"></a>app_util_critical_region_exit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[ba]"></a>ble_advdata_set</STRONG> (Thumb, 152 bytes, Stack size 104 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[81]"></a>ble_advertising_init</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[be]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[c2]"></a>ble_advertising_restart_without_whitelist</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_restart_without_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
</UL>

<P><STRONG><a name="[c3]"></a>ble_advertising_start</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_slow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[ca]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[cc]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[d4]"></a>ble_nus_init</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[d1]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[14c]"></a>ble_nus_string_send</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_nus_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[da]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[f5]"></a>bsp_board_button_idx_to_pin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_idx_to_pin))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>

<P><STRONG><a name="[ef]"></a>bsp_board_button_state_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, boards.o(i.bsp_board_button_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>

<P><STRONG><a name="[82]"></a>bsp_board_led_invert</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alert_timer_handler
</UL>

<P><STRONG><a name="[e1]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[e3]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[f4]"></a>bsp_board_led_state_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[e4]"></a>bsp_board_leds_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, boards.o(i.bsp_board_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = bsp_board_leds_init &rArr; bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
</UL>

<P><STRONG><a name="[e6]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[e7]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[ed]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[e8]"></a>bsp_btn_ble_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_btn_ble_init &rArr; startup_event_extract &rArr; bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_event_extract
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
</UL>

<P><STRONG><a name="[d3]"></a>bsp_btn_ble_on_ble_evt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_on_ble_evt &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[eb]"></a>bsp_btn_ble_sleep_mode_prepare</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.bsp_btn_ble_sleep_mode_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_sleep_mode_prepare &rArr; bsp_wakeup_button_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>

<P><STRONG><a name="[ee]"></a>bsp_button_is_pressed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.bsp_button_is_pressed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startup_event_extract
</UL>

<P><STRONG><a name="[30]"></a>bsp_event_handler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main.o(i.bsp_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = bsp_event_handler &rArr; ble_advertising_restart_without_whitelist &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_restart_without_whitelist
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.buttons_leds_init)
</UL>
<P><STRONG><a name="[7e]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[f1]"></a>bsp_indication_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[f3]"></a>bsp_init</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, bsp.o(i.bsp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
</UL>

<P><STRONG><a name="[ec]"></a>bsp_wakeup_button_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp.o(i.bsp_wakeup_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_wakeup_button_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_idx_to_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
</UL>

<P><STRONG><a name="[2]"></a>digital_servo_motor_fun</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, app_user.o(i.digital_servo_motor_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = digital_servo_motor_fun &rArr; servo_m2_degree &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m2_degree
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;servo_m1_degree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_user.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>fs_queued_op_count_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[1]"></a>gear_box_dc_motor_fun</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, app_user.o(i.gear_box_dc_motor_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = gear_box_dc_motor_fun &rArr; motor_forward &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_backward
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_current_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_user.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>get_dev_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, myadc.o(i.get_dev_id))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>get_dev_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, myadc.o(i.get_dev_type))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[0]"></a>linear_actuator_fun</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_user.o(i.linear_actuator_fun))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = linear_actuator_fun &rArr; motor_forward &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_backward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_user.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = main &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smipwm_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_adc_sampling
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_type
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dev_id
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_periph_name
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttons_leds_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[123]"></a>manage_adc_sampling</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, myadc.o(i.manage_adc_sampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = manage_adc_sampling &rArr; adc_read_values &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_sample
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_values
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>motor_backward</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mypwm.o(i.motor_backward))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = motor_backward &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_actuator_fun
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gear_box_dc_motor_fun
</UL>

<P><STRONG><a name="[10c]"></a>motor_forward</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mypwm.o(i.motor_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = motor_forward &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_actuator_fun
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gear_box_dc_motor_fun
</UL>

<P><STRONG><a name="[10b]"></a>motor_stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mypwm.o(i.motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = motor_stop &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;over_current_event
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linear_actuator_fun
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gear_box_dc_motor_fun
</UL>

<P><STRONG><a name="[6e]"></a>nrf_drv_adc_buffer_convert</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_adc_buffer_convert &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_int_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_check
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_adc_sampling
</UL>

<P><STRONG><a name="[6b]"></a>nrf_drv_adc_channel_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_adc_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[67]"></a>nrf_drv_adc_channel_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[66]"></a>nrf_drv_adc_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_adc.o(i.nrf_drv_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_adc_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[6f]"></a>nrf_drv_adc_sample</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_drv_adc_sample))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_start_conversion
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_adc_sampling
</UL>

<P><STRONG><a name="[128]"></a>nrf_drv_clock_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[12a]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[10e]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[127]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[84]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[88]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[103]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[87]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[86]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[95]"></a>nrf_drv_gpiote_out_init</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_drv_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[9a]"></a>nrf_drv_gpiote_out_task_addr_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_out_task_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[9f]"></a>nrf_drv_gpiote_out_task_enable</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_gpiote_out_task_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[9e]"></a>nrf_drv_gpiote_out_task_force</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_out_task_force
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[137]"></a>nrf_drv_gpiote_out_uninit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_te_default
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[98]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[9c]"></a>nrf_drv_ppi_channel_assign</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_ppi_channel_assign &rArr; is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[99]"></a>nrf_drv_ppi_channel_disable</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_channel_disable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[13b]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_ppi_channel_enable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[13c]"></a>nrf_drv_ppi_channel_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_ppi_channel_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_channel_disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[13d]"></a>nrf_drv_ppi_channels_include_in_group</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_include_in_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channels_include_in_group &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[13e]"></a>nrf_drv_ppi_channels_remove_from_group</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_remove_from_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_clear
</UL>

<P><STRONG><a name="[a5]"></a>nrf_drv_ppi_group_alloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_group_alloc &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[140]"></a>nrf_drv_ppi_group_enable</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_group_enable &rArr; is_app_group
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
</UL>

<P><STRONG><a name="[141]"></a>nrf_drv_ppi_group_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_ppi_group_free &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ppi_group_disable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[a4]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[a1]"></a>nrf_drv_timer_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[144]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[aa]"></a>nrf_drv_timer_compare_int_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_compare_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_irq_disable
</UL>

<P><STRONG><a name="[93]"></a>nrf_drv_timer_compare_int_enable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_compare_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[147]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
</UL>

<P><STRONG><a name="[a2]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[a9]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_timer_extended_compare &rArr; nrf_drv_timer_compare
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[a7]"></a>nrf_drv_timer_init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[14a]"></a>nrf_drv_timer_uninit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_uninit &rArr; nrf_drv_timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[10a]"></a>over_current_event</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_user.o(i.over_current_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = over_current_event &rArr; motor_stop &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gear_box_dc_motor_fun
</UL>

<P><STRONG><a name="[34]"></a>pwm_ready_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mypwm.o(i.pwm_ready_callback))
<BR>[Address Reference Count : 1]<UL><LI> mypwm.o(i.smipwm_init)
</UL>
<P><STRONG><a name="[2a]"></a>pwm_ready_tick</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, app_pwm.o(i.pwm_ready_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pwm_ready_tick &rArr; pwm_irq_disable &rArr; nrf_drv_timer_compare_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_pwm.o(i.app_pwm_init)
</UL>
<P><STRONG><a name="[105]"></a>servo_m1_degree</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mypwm.o(i.servo_m1_degree))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = servo_m1_degree &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_servo_motor_fun
</UL>

<P><STRONG><a name="[107]"></a>servo_m2_degree</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mypwm.o(i.servo_m2_degree))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = servo_m2_degree &rArr; app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_servo_motor_fun
</UL>

<P><STRONG><a name="[120]"></a>set_periph_name</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(i.set_periph_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_periph_name &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>simple_checksum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_user.o(i.simple_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simple_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handler
</UL>

<P><STRONG><a name="[121]"></a>smipwm_init</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, mypwm.o(i.smipwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = smipwm_init &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[df]"></a>softdevice_enable</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[de]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[35]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_fault_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[dd]"></a>softdevice_handler_init</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[129]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7f]"></a>advertising_init</STRONG> (Thumb, 108 bytes, Stack size 168 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>ble_evt_dispatch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[dc]"></a>ble_stack_init</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, main.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>buttons_leds_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(i.buttons_leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = buttons_leds_init &rArr; bsp_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>conn_params_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[100]"></a>conn_params_init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, main.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>gap_params_init</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>nus_data_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nus_data_handler &rArr; ble_nus_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_string_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.services_init)
</UL>
<P><STRONG><a name="[27]"></a>on_adv_evt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = on_adv_evt &rArr; sleep_mode_enter &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[d2]"></a>on_ble_evt</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, main.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = on_ble_evt &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[31]"></a>on_conn_params_evt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[122]"></a>services_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = services_init &rArr; ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>sleep_mode_enter</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(i.sleep_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sleep_mode_enter &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_handler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[106]"></a>nrf_delay_ms</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, app_user.o(i.nrf_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_servo_motor_fun
</UL>

<P><STRONG><a name="[124]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, mypwm.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_forward
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_backward
</UL>

<P><STRONG><a name="[26]"></a>adc_event_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, myadc.o(i.adc_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> myadc.o(i.adc_config)
</UL>
<P><STRONG><a name="[6a]"></a>determine_adc_category</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, myadc.o(i.determine_adc_category))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = determine_adc_category
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_config
</UL>

<P><STRONG><a name="[e5]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, boards.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_init
</UL>

<P><STRONG><a name="[e2]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[2f]"></a>alert_timer_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.alert_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = alert_timer_handler &rArr; bsp_board_led_invert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[36]"></a>bsp_button_event_handler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_timer_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>bsp_led_indication</STRONG> (Thumb, 800 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_timer_handler
</UL>

<P><STRONG><a name="[2d]"></a>button_timer_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp.o(i.button_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = button_timer_handler &rArr; bsp_button_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[2e]"></a>leds_timer_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(i.leds_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = leds_timer_handler &rArr; bsp_led_indication &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(i.bsp_init)
</UL>
<P><STRONG><a name="[f6]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, bsp.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>

<P><STRONG><a name="[7d]"></a>advertising_buttons_configure</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[ea]"></a>connection_buttons_configure</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[e9]"></a>startup_event_extract</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.startup_event_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = startup_event_extract &rArr; bsp_button_is_pressed &rArr; bsp_board_button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_is_pressed
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_init
</UL>

<P><STRONG><a name="[bb]"></a>advdata_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[72]"></a>appearance_encode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[71]"></a>ble_device_addr_encode</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[ff]"></a>conn_int_check</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[76]"></a>conn_int_encode</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[73]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[77]"></a>manuf_specific_data_encode</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[79]"></a>name_encode</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[78]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[bc]"></a>srdata_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[74]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[b9]"></a>uint16_encode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[75]"></a>uuid_list_encode</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[16f]"></a>uuid_list_sized_encode</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[7b]"></a>addr_is_valid</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[7a]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[7c]"></a>adv_mode_next_get</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adv_mode_next_get &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
</UL>

<P><STRONG><a name="[c4]"></a>flash_access_in_progress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[bf]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[c0]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[c1]"></a>on_timeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ble_advertising.o(i.on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[c6]"></a>set_adv_mode_directed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[c7]"></a>set_adv_mode_directed_slow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_slow))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[c8]"></a>set_adv_mode_fast</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_adv_mode_fast &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[c9]"></a>set_adv_mode_slow</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[15d]"></a>whitelist_has_entries</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[101]"></a>conn_params_negotiation</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[102]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[d0]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[cd]"></a>on_connect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[ce]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[cf]"></a>on_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2b]"></a>update_timeout_handler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[db]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[d7]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[d8]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_nus.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[d9]"></a>on_write</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[d5]"></a>rx_char_add</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[d6]"></a>tx_char_add</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[59]"></a>clock_clk_started_notify</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>item_dequeue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[56]"></a>nrf_clock_event_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>nrf_clock_event_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, nrf_drv_common.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>

<P><STRONG><a name="[134]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[52]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>channel_port_alloc</STRONG> (Thumb, 116 bytes, Stack size 52 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[54]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>nrf_gpio_cfg</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[139]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
</UL>

<P><STRONG><a name="[55]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
</UL>

<P><STRONG><a name="[12d]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[135]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
</UL>

<P><STRONG><a name="[51]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[50]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[138]"></a>nrf_gpiote_te_default</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_te_default))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
</UL>

<P><STRONG><a name="[130]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[12c]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[12e]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[133]"></a>pin_in_use_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[16c]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[169]"></a>nrf_uart_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[159]"></a>nrf_uart_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[16a]"></a>nrf_uart_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[168]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[16b]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[158]"></a>rx_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[16d]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[167]"></a>tx_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tx_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[16e]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[62]"></a>uart_irq_handler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>irq_handler</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, nrf_drv_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
</UL>

<P><STRONG><a name="[10f]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[110]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[111]"></a>nrf_timer_event_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[146]"></a>nrf_timer_int_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[145]"></a>nrf_timer_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
</UL>

<P><STRONG><a name="[148]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
</UL>

<P><STRONG><a name="[143]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
</UL>

<P><STRONG><a name="[117]"></a>are_app_channels</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.are_app_channels))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
</UL>

<P><STRONG><a name="[115]"></a>group_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.group_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_group
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_group
</UL>

<P><STRONG><a name="[112]"></a>is_allocated_channel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_allocated_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_allocated_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[114]"></a>is_allocated_group</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_allocated_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_allocated_group
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
</UL>

<P><STRONG><a name="[116]"></a>is_app_channel</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.is_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_app_channels
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[118]"></a>is_app_group</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_app_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_app_group
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;group_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
</UL>

<P><STRONG><a name="[119]"></a>is_programmable_app_channel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_drv_ppi.o(i.is_programmable_app_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_programmable_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
</UL>

<P><STRONG><a name="[113]"></a>nrf_drv_ppi_channel_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_programmable_app_channel
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_app_channel
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_allocated_channel
</UL>

<P><STRONG><a name="[13a]"></a>nrf_ppi_channel_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_ppi_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>

<P><STRONG><a name="[142]"></a>nrf_ppi_group_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_ppi_group_disable))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
</UL>

<P><STRONG><a name="[4e]"></a>adc_sample_process</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_event_clear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_adc_config_set
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>nrf_adc_config_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_config_set))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[126]"></a>nrf_adc_event_check</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[4c]"></a>nrf_adc_event_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_event_clear))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>

<P><STRONG><a name="[4d]"></a>nrf_adc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>nrf_adc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_adc.o(i.nrf_adc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_adc_buffer_convert
</UL>

<P><STRONG><a name="[29]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detection_delay_timeout_handler &rArr; nrf_drv_gpiote_in_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[28]"></a>gpiote_event_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[ad]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[af]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[164]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[ae]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[f9]"></a>compare_reg_update</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[161]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[162]"></a>expired_timers_handler</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[11a]"></a>list_deletions_handler</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, app_timer.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[11c]"></a>list_insertions_handler</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[fd]"></a>nrf_delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fc]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[b1]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[b0]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[fb]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[ac]"></a>rtc1_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[fa]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[160]"></a>timeout_handler_exec</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[5b]"></a>timer_list_handler</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = timer_list_handler &rArr; compare_reg_update &rArr; timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[11d]"></a>timer_list_insert</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[11b]"></a>timer_list_remove</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[b3]"></a>timer_start_op_schedule</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[b5]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[5a]"></a>timer_timeouts_check</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_timeouts_check &rArr; timeout_handler_exec &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[165]"></a>user_op_alloc</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[166]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[b7]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[94]"></a>app_pwm_channel_init</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, app_pwm.o(i.app_pwm_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_pwm_channel_init &rArr; nrf_drv_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[154]"></a>nrf_drv_ppi_channel_to_mask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_ppi_channel_to_mask))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[13f]"></a>nrf_drv_ppi_group_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_pwm.o(i.nrf_drv_ppi_group_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_ppi_group_clear &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[157]"></a>nrf_drv_ppi_task_addr_group_disable_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_ppi_task_addr_group_disable_get))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
</UL>

<P><STRONG><a name="[155]"></a>nrf_drv_ppi_task_addr_group_enable_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_drv_ppi_task_addr_group_enable_get))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[8e]"></a>nrf_drv_timer_capture_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_pwm.o(i.nrf_drv_timer_capture_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_capture_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_busy_check
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[156]"></a>nrf_drv_timer_capture_task_address_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_pwm.o(i.nrf_drv_timer_capture_task_address_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_capture_task_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
</UL>

<P><STRONG><a name="[9b]"></a>nrf_drv_timer_compare_event_address_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_pwm.o(i.nrf_drv_timer_compare_event_address_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_compare_event_address_get
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[96]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[97]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_init
</UL>

<P><STRONG><a name="[a8]"></a>nrf_timer_frequency_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_pwm.o(i.nrf_timer_frequency_get))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
</UL>

<P><STRONG><a name="[a0]"></a>pan73_workaround</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_pwm.o(i.pan73_workaround))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[14d]"></a>pwm_channel_ppi_disable</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_pwm.o(i.pwm_channel_ppi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pwm_channel_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[a6]"></a>pwm_dealloc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, app_pwm.o(i.pwm_dealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pwm_dealloc &rArr; nrf_drv_gpiote_out_uninit &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[14e]"></a>pwm_irq_disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_pwm.o(i.pwm_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwm_irq_disable &rArr; nrf_drv_timer_compare_int_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ready_tick
</UL>

<P><STRONG><a name="[14f]"></a>pwm_ppi_disable</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_pwm.o(i.pwm_ppi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>

<P><STRONG><a name="[92]"></a>pwm_transition</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, app_pwm.o(i.pwm_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pwm_transition &rArr; pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_m
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_n_to_0or100
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_n
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition_0or100_to_0or100
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[150]"></a>pwm_transition_0or100_to_0or100</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, app_pwm.o(i.pwm_transition_0or100_to_0or100))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pwm_transition_0or100_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition
</UL>

<P><STRONG><a name="[151]"></a>pwm_transition_0or100_to_n</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, app_pwm.o(i.pwm_transition_0or100_to_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pwm_transition_0or100_to_n &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_channel_ppi_disable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_task_addr_group_enable_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_clear
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition
</UL>

<P><STRONG><a name="[152]"></a>pwm_transition_n_to_0or100</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, app_pwm.o(i.pwm_transition_n_to_0or100))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pwm_transition_n_to_0or100 &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_task_addr_group_disable_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_clear
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition
</UL>

<P><STRONG><a name="[153]"></a>pwm_transition_n_to_m</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, app_pwm.o(i.pwm_transition_n_to_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pwm_transition_n_to_m &rArr; pwm_ppi_disable &rArr; nrf_drv_ppi_channel_disable &rArr; is_app_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ppi_disable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_frequency_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_event_address_get
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_capture_task_address_get
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_clear
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_to_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_transition
</UL>

<P><STRONG><a name="[15f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[15c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[15b]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[15a]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[5f]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5e]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[60]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[64]"></a>_printf_core</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, printf1.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>

<P><STRONG><a name="[25]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf1.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(i.__0sprintf$1)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[3a]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
